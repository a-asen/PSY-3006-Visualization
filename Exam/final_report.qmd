---
title: "PSY-3006 - Indepdendent study: Visualization in R with ggplots2"
format: gfm
lang: en-GB
editor: 
  markdown:
      wrap: 62
# Approximately 1600 words
---

Candidate number: 21

The repository is available at https://github.com/a-asen/PSY-3006-Visualization (as part of the course requirement). The code related to the exam will be published as a "release" using the tag "exam". The exam is around 11100 words, which corresponds to about 25 pages of text.


{{< pagebreak >}}


# Visualizing

Data visualization is a fundamental tool for comprehending and analysing data, proving invaluable for both researchers and non-experts. This seemingly simple technique efficiently distils complex data structures into accessible insights, overcoming the potential incomprehensibility of intricate datasets. The evolution of technology has significantly eased the process of data visualization, with the rise of open-source programs enabling widespread access to this skill. Among these tools, R stands out as a prominent open-source program, boasting a rich library of packages. Notably, the "ggplot2" library plays a pivotal role in adhering to a "grammar" for effective data visualization.

## The Grammar of graphics

Leland Wilkinson's "The Grammar of Graphics" delineates a framework for crafting a "grammar" of graphics. This foundational book provides essential insights into structuring the grammar required for creating meaningful visualizations. Importantly, it transcends reliance on a specific coding language, emphasizing a universal understanding of how to structure the grammar for visualization.

## Course goal: mastering ggplot2

This course centres around the practical application of the ggplot2 package in R for data visualization, building upon the principles laid out in "The Grammar of Graphics." The framework empowers learners to visualize data in R by leveraging this grammar-centric approach. Beyond ggplot2 mastery, the course necessitates proficiency in version control like Git, and reporting tools like Quarto.

Git is a software used to store different versions of a code which enables effective error resolution by allowing users to revert to previous versions, and it enhances the reproducibility of analyses. Moreover, it serves as a vital tool for collaborative coding efforts, streamlining coordination among team members. Furthermore, leveraging services like Github or OSF facilitates seamless sharing of code in a transparent manner, enhancing collaborative and open workflows. 

Quarto is a reporting tool built on Rmarkdown, which integrates seamlessly with Markdown's lightweight markup language. This combination facilitates structured text files with embedded R code and output. Quarto, introduces its own syntax improvements, notably enabling inline code with the "`". This feature proves invaluable in data analysis scenarios where changes to a single aspect may necessitate rewriting numbers.


## Circle visualization

Circular visualization deviates from the conventional rectangular depiction of data, where a plot typically employs x and y-axes. This alternative representation, connecting back to itself circularly, is not widely adopted due to inherent challenges, as we will explore in this section. Despite its limited application, circular visualization proves valuable in specific scenarios, especially when dealing with data exhibiting a natural circular patternâ€”such as seasonal fluctuations over days and hours. Wilkinson (2006, page 213) advocates for the use of circle plots in showcasing seasonal data. In the following section, comprising two exercises, we delve into the nuanced practice of visualizing data in a circular format.


### Ex1: Seasonal sleep

The initial part centres on circular visualization of simulated seasonal sleep data. This dataset represents the sleep patterns of an imaginary participant, showcasing longer sleep durations during winter and shorter durations in summer, with considerable variability throughout the year. The exercise aims to uncover effective methods for visualizing this intricate sleep data. Upon exploration, visualizing every data point throughout the year proves challenging, introducing difficulties in associating each data point with a specific day. To enhance interpretability, the data is aggregated weekly, and an error bar is introduced, resulting in a more coherent visualization. While circular visualization offers aesthetically pleasing figures, the compromise on accurate data representation raises considerations. Comparatively, a conventional rectangular plot provides a comprehensive overview of sleep distribution throughout the year, making it easier to discern changes in sleep patterns over time. Although this format may be less intuitive for capturing seasonal relationships, it highlights the trade-offs inherent in adopting circle plots for season-based data visualization. To delve deeper into the efficacy of circle plots, the focus shifts to visualizing the sleep times of participants in a sleep experiment.

The report for exercise 1 can be found [here](https://github.com/a-asen/PSY-3006-Visualization/blob/main/ex1/report/Circle%20plot%20-%20seasonal%20sleep.md). Final figure is displayed below:

```{r}
#| include: false
library(tidyverse)
library(ggridges)
library(Rcpp)
library(tidyverse)
library(ggridges)
library(ggside)

load("../ex1/data/sleep_data.rdata") # load data
load("../ex1/data/daylight_df_Tromso_2022_improved.rdata") # load new daylight
daylight_df

sleep_data |>
  select(ends_with("_time"), sleep_amount) |> 
  cbind(daylight_df) -> sleep_data2

sleep_data2 |>
  mutate(week = week(date),
         week = ifelse(week==53, 52, week)) |>
  group_by(week) |> 
  mutate(week_mean = mean(sleep_amount),
         week_num_mean = mean(year_day), 
         week_sd = sd(sleep_amount),
         sunrise_n = round(hour(sunrise)+minute(sunrise)/60+
                             second(sunrise)/60/60, 2),
         sunset_n = round(hour(sunset)+minute(sunset)/60+
                            second(sunset)/60/60, 2),
         sunrise_n = ifelse(sunrise_n>23, 0, sunrise_n)) -> sleep_data3
```
```{r}
#| error: false
#| warning: false
#| echo: false
#| fig-dpi: 400
reduction <- 4.8 
additional_start <- 5
sleep_data |> group_by(date_m) |> 
  summarize(v = min(cumulative_days)) |> pull(v) -> month_breaks

sleep_data |>
  mutate(week = c(rep(1:52, each=7), 52)) |>
  group_by(week) |> 
  mutate(week_mean = mean(sleep_amount),
         week_sd = sd(sleep_amount),
         week_num_day = median(cumulative_days)) |>
  ungroup() |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, 
                          ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  stat_smooth(geom="line", alpha=.5, linewidth=.7, color="#208fff", formula=y~x, method="loess")+
  stat_summary(mapping=aes(x=week_num_day), fun=mean,
               geom="line", color="red",linewidth=.7, alpha=.7)+
  stat_summary(mapping=aes(x=week_num_day), fun.data=mean_cl_normal,
               geom="linerange", color="red", linewidth=2, alpha=.3)+
  geom_point(mapping=aes(x=1,y=4), alpha =0)+ # off center
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks = month_breaks,
                     labels = c(unique(sleep_data$date_m_name)))+
  scale_y_continuous(breaks=seq(0,24,1))+
  labs(x="Weeks in months", y="Hours of sleep")
```

### Ex2: Sleep times

In the second exercise, the focus shifts to visualizing sleep times under two distinct conditions. Participants experienced either normal sleep or sleep deprivation, with the latter involving a 3-hour delay in bedtime. The expectation was clear: sleep times should exhibit noticeable differences between the two conditions. To achieve this, I experimented with visualizing sleep time in relation to the hours on a circular plot, referencing a standard 12-hour clock. The height of the points corresponded to the number of hours slept, allowing for a comparison between those sleeping under normal conditions and those undergoing sleep deprivation.

The exploration extended to considering a 24-hour clock for visualization, ultimately opting for a split by 12 hours, from 18 to 6. This choice aligned with the relevant time window and provided meaningful correspondence to a 12-hour clock (with 24 positioned at the top). Although alternative suggestions, such as an am/pm split and the inclusion of wake time, were considered, they presented trade-offs. An investigation into a 24-hour clock, including wake times, offered fewer details in sleep times. Importantly, the key informative factors remained sleep time and sleep length, as wake times did not exhibit significant differences between conditions. This simplification enhances the interpretability of results and underscores the rationale for focusing on sleep times rather than wake times.

The report for exercise 2 can be found [here](https://github.com/a-asen/PSY-3006-Visualization/blob/main/ex2/report/Circle%20plot%20-%20sleep%20times.md). Final figure is displayed below:

```{r}
#| include: false

list.files("../ex2/data", pattern=".rdata", full.names = T,ignore.case = T) -> files
for(x in files){load(x)}
sleep_diary |>
  mutate(sleepdep = factor(if_else(pre_control==1, "NS",
                           ifelse(pre_sleepdep==1, "PSD", NA)), 
                           levels = c("PSD","NS")), 
         subj = as.numeric(subj) 
         ) |>
  filter(!(is.na(sleepdep))) -> sleep

sleep |>
  group_by(sleepdep) |>
  mutate(sd_length = length(sleepdep)) |> ungroup() |>
  group_by(subj, sleepdep) |>
  mutate(
    duration = mean(sleep_duration, na.rm=T),
    duration_sd = sd(sleep_duration, na.rm=T),
    duration_se = sd(sleep_duration, na.rm=T) / sqrt(sd_length),
    sleep = mean(sleep_time_cum, na.rm=T),
    sleep_sd = sd(sleep_time_cum, na.rm=T), 
    sleep_se = sd(sleep_time_cum, na.rm=T) / sqrt(sd_length),
    waking = mean(last_awaking_fix, na.rm=T),
    waking_sd = sd(last_awaking_fix, na.rm=T),
    waking_se = sd(last_awaking_fix, na.rm=T) / sqrt(sd_length),
    ) -> s_sleep2
```
```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-dpi: 400
s_sleep2 |>
  mutate(sleepdep=as.character(sleepdep)) |>
  ggplot(aes(x=sleep, y=duration, fill=sleepdep, group=sleepdep))+
  geom_col(position=position_dodge(), width = 0.05, alpha=.18)+
  geom_point(aes(col=sleepdep), size=.6)+
  scale_fill_manual(values = c("#5cd0d3","#f58d86"))+
  scale_colour_manual(values = c("#5cd0d3","#f58d86"))+
  coord_polar(start = -pi)+ 
  geom_blank(aes(x=30,y=3))+ 
  geom_blank(aes(x=18,y=3))+ 
  scale_x_continuous(breaks=seq(0,29,1), labels=c(seq(0,23,1), seq(0,5,1)), 
                     minor_breaks = F)+
  scale_y_continuous(breaks=seq(3,10,1))+
  theme_minimal()+
  labs(x="Sleep time", y="Sleep duration", col="Condition", fill="Condition", 
       title = "Sleep time and duration between conditions",
       caption="NS = normal sleep, PSD = partial sleep deprivation.")
```

## Multivariate visualization

In the subsequent exercises (ex3 and ex4), the emphasis shifts to multivariate visualizationâ€”representing multiple variables in a single plot. This approach is adopted to foster a more intuitive understanding of inter-variable relationships, unveiling potential patterns and connections. The dataset employed originates from a study on mind wandering (MW), featuring variables MW, mind blanking (MB), approximate entropy (AE), and behavioural variability (BV).

Mind wandering and mind blanking was captured on a 4-point Likert scale, where lower values indicated instances of mind wandering, and mind blanking (i.e., contenteless thoughts versus contentfull thoughts) respectively. Moving beyond subjective measures, approximate entropy (AE) offers a continuous score reflecting the sequence randomness generated by participants, with higher values indicating increased randomnessâ€”considered desirable in this context. Additionally, behavioural variability (BV) serves as a continuous variable, providing insights into participants' consistency in response timing across varying sequence lengths.

The first part of this exploration (ex3) delves into visualizing two continuous variables, while the subsequent section (ex4) extends the inquiry to encompass a combination of a continuous and a categorical variable.


### Ex3: Continuous-continuous

In this exercise, I explored the joint distribution of AE and BV, aiming to uncover patterns in their relationship. To achieve this, I experimented with various visualization methods, ultimately opting for a 2D density plot. One of the expectations about the relationship of the variables is that when AE is high, BV should be low. This would reflect that the participant is focus on the task by producing random sequences and tapping consistently. However, when the participant is not focused on the task (i.e., MW), AE should be low and tapping variability should be high. 

Despite the expectation, any clear pattern was difficult to dicern. However, a slight trend emerged: higher values of BV tended to align with lower values of AE, and vice versa. While the relationship is not crystal clear, the joint distribution visualization indicates a suggestive pattern in the expected direction, reinforcing the connection between AE and BV.

The report for exercise 3 can be found [here](https://github.com/a-asen/PSY-3006-Visualization/blob/main/ex3/report/Multivariate%20visualization%20ex3.md). Final figure is displayed below:

```{r}
#| include: false

read_csv("../ex3/data/raw_mwtms_data.csv") -> all_mw_data 
sourceCpp("../ex3/src/apen.cpp") # load apen conversion
source("../ex3/src/transformation.R") # function
all_mw_data |> 
  filter(stimulation == "sham") -> mw_data

da_pro(mw_data, nback=25) -> trans_mw

min(trans_mw$zlogapen) -> AE_min
min(trans_mw$zlogbv) -> BV_min
```
```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-dpi: 400
trans_mw |> 
  ggplot(aes(x=zlogbv, y=zlogapen)) +
  geom_density_2d_filled()+
  theme_minimal()+
  labs(x= "Z-scored BV", y="Z-scored AE", fill="Density") +
  coord_cartesian(expand = F, xlim=c(AE_min,2), ylim=c(BV_min,2.5))+
  geom_xsidedensity()+ 
  geom_ysidedensity()+
  scale_xsidey_continuous(breaks = c(0, 1))+
  scale_ysidex_continuous(breaks = c(0,.5))+
  geom_xsideline(aes(y=0), linetype = 2, alpha =.5)+ 
  geom_xsideline(aes(y=1), linetype = 2, alpha =.5)+ 
  geom_ysideline(aes(x=0), linetype = 2, alpha = .5)+ 
  geom_ysideline(aes(x=1), linetype = 2, alpha = .5)+ 
  theme(ggside.panel.scale = .8,
        ggside.panel.background = element_blank(), 
        ggside.panel.grid.minor = element_blank(), 
        ggside.panel.grid.major = element_blank(), 
        ggside.panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        )
```
### Ex4: Categorical-continuous

For the final visualization (ex4), I delved into exploring the distribution of AE across different mind wandering (MW) responses. This approach promises a more meaningful analysis, anticipating higher AE scores when participants report being on-task compared to off-task moments. Departing from the joint distribution in the previous exercise, I began by exploring various visualization methods and ultimately adopted ggridges for its effectiveness in handling overlapping distributions over categorical values.

Despite initial expectations, the AE figures did not distinctly indicate an increase during on-task reports (3-4). For this reason, I quickly visualized measures of flowers from the "iris" dataset found in base R. This plot clearly indicate differences in the distributions, something which we might have expected. Therefore, I further investigated the relationship of the other variables, such as BV and MB. However, none of these yielded particular different distributions. 

For the final visualization (ex4), I delved into exploring the distribution of AE across different mind wandering (MW) responses. This approach promises a more meaningful analysis, anticipating higher AE scores when participants report being on-task compared to off-task moments. Departing from the joint distribution in the previous exercise, I began by exploring various visualization methods and ultimately adopted ggridges for its effectiveness in handling overlapping distributions over categorical values.

Despite initial expectations, the AE figures did not distinctly indicate an increase during on-task reports (3-4). For this reason, I quickly visualized measures of flowers from the "iris" dataset found in base R. This comparison clearly indicates differences in the distributions, aligning with what we might have expected. Subsequently, I delved into the relationship of other variables, such as BV and MB. However, none of these yielded particular different distributions.

The report for exercise 4 can be found [here](https://github.com/a-asen/PSY-3006-Visualization/blob/main/ex4/report/Multivariate%20visualization%20ex4.md). Final figure is displayed below:

```{r}
#| include: false
#| fig-dpi: 400
all_mw_data |> 
  select(-region.y) |>
  filter(stimulation == "sham") -> mw_data

da_pro(mw_data, nback=25) -> trans_mw
```
```{r start plot}
#| echo: false
#| message: false
#| warning: false
trans_mw |> 
  ggplot(aes(x=zlogapen, y=probe1, fill = 0.5 - abs(0.5 - after_stat(ecdf))))+
  geom_density_ridges_gradient(scale = 1.3, calc_ecdf = T, 
                               quantile_lines = T,
                               vline_color="lightblue")+ 
  scale_fill_viridis_c(name = "Tail probability", option = "inferno")+
  theme_minimal()+
  scale_x_continuous(breaks=seq(-8,8,1))+
  labs(y="Mind wandering category", x="Standardized AE score")
```



