---
title: "Circle Plot"
format: pdf
lang: en-GB
editor: 
  markdown:
      wrap: 72
---

```{r circle final plot}
#| echo: false
reduction <- 4.8 
additional_start <- 5
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, 
                          ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_line()+
  geom_smooth(alpha=0)+
  geom_point(mapping=aes(x=1,y=4), alpha =0)+ # off center
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30),labels = c(0, unique(sleep_data2$date_m_name)))+
  scale_y_continuous(breaks=seq(4,24,1))+
  labs(x="Cumulative day", y="Hours of sleep")
```


# Circle plot

The motivation for creating a circle plot is to visualize data in relation to
seasons. Seasons are a recurring natural phenomenon that can significantly impact
various aspects of our lives, from weather patterns to human behaviour.
Visualizing data in a circle may offer a novel way to explore seasonal changes.

This approach may be valuable for data sets related to changes over time,
particularly over seasons. Take for instance, Tromsø, it is located above [above
the arctic circle](https://en.wikipedia.org/wiki/Arctic_Circle) and exhibits some
of the most extreme daylight changes - from no sunlight at winter, to only
sunlight at summer. A remarkable change in season which could neatly be displayed
in a circular plot.

For this purpose, I want explore the utility of visualizing a data in a circular
way. We recently had a study that investigated participants when they were sleep
deprived and when they were not. To this end, we gathered data regarding
participants sleep time and wake time, as well as controlling with an Actigraphy.
Although I will not use that data here, the data is well suited to visualize
changes during a season.

With this idea in mind, I have created fake sleep data of X along with the sleep
rise and set times located at Tromsø. The sleep data follow the pattern of the sun
changes throughout the changes along with some additional noise. The goal is to
visualize the sleep time, wake time, and sun rise changes throughout a year (2023)
in a circular way.

## Standard visualizing

We first load the relevant packages and retrieve the data.

```{r preparation}
#| message: false
library(tidyverse) # libs
load("../data/sleep_data.rdata") # load data
```

To start of, we can visualize the data according to sleep amount throughout the
year.

```{r normal point}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_point()
```

We can see that the data starts off high (in January) and reduce towards middle
(summer) and increase towards the end (winter). To investigate the average
throughout the year, we can add a geom_smooth.

```{r normal point+mean}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_point()+
  geom_smooth()
```

To put our plot in context, we can add the amount of daylight in each day
throughout the year.

```{r normal point+mean+sun}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .5)+
  # Area before data points to keep it in the background
  geom_point()+
  geom_smooth()
```

The yellow area represents the number of hours of daylight each day receives. As we
can see, the sunlight varies from nothing (at the start and end of the x-axis) to
all day (in the middle of the x-axis).

Alternatively, we can display the amount of dark hours throughout the year.

```{r normal point+mean+dark}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.5)+
  geom_point()+
  geom_smooth()

```

The dark area represents the amount of darkness that each day receives. However, adding both together might aid in interpreting the plot. 


```{r normal point+mean+sun+dark}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .5)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.5)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()
```

Now, with this plot, we can more easily discern between darkness and sunlight
throughout the year. We will leave some alpha to be able to see the underlying
grid.

To finish up our simple plot, We can add some aesthetic changes to the plot to
make it more pleasing.

```{r normal point+mean+sun+dark+alpha}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  theme_bw()+
  coord_cartesian(expand=F)+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,4))
```

Here we can quite neatly see the the amount of sleep each day in relation to the
number of daylight hours. Although we should note that a lot of date is being
shown that does not contain a lot of data. For instance, the distance over 11
hours and below 5 hours contain very little data as compared to in between 11 and
5. This could be ameliorated by condensing the sunlight hours within this span.
Either by transformation, or, with a different, right hand, scale, ranging from 0
to 24 hours. The latter of which might be more satisfactory to understand the
radical changes throughout the year. However, I will move on to visualizing in a
cricluar way and then discuss and suggest a final plot.

## Circular plot

It is rather easy to display data in circles using ggplot. We can simply use the
code "coord_polar" which transforms the data to fit a circle. However, some of my
earlier attempts utilized the "circlize" with inspiration from [R-Gallery - chord
diagram](https://www.kyle-w-brown.com/R-Gallery/flow.html#chord-diagram). A
packages that works great but is also more limiting than ggplots. Moreover, Kyle
Brown also talk about [circular
barplots](https://www.kyle-w-brown.com/R-Gallery/ranking.html#circular-barplot)
earlier in the book, which utilizes ggplot.

As discussed earlier, the benefits of using ggplots is that it is made to be
flexible at the various stages of visualizing data. On the other hand, [*circlize*
is based on](https://jokergoo.github.io/circlize_book/book/introduction.html)
[Circos](http://circos.ca/) a Perl implementation of circular data visualization, which is implemented particularly for genomic research. Which seems to be both its strength and, in my case, its flaws. Therefore, utilizing ggplots may be beneficial for my case, as it has more flexibility in changing the plot. 

First I test the "coord_polar" implementation.  

```{r circle point}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_point()+
  coord_polar()
```

It seems that the transformation also limits the range of the y-axis for us. The automatic limitation seems to be somewhat problematic, as our smallest data point is in the very center of the plot. Moreover, the layout of the circle do not follow the convention I would like to follow. In my case, I would like the year to start at the bottom (1 of January) and have breaks at each (or approximately) month.

```{r circle point transform}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_point()+
  coord_polar(direction = -1, start = pi)+
  scale_x_continuous(breaks = seq(0,365,30))
```

We can then add all the elements from the previous plot to investigate how it will look in a circular plot. 

```{r circle sun+dark}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,4))
```

The plot looks more interesting as the sunlight changes throughout the year. However, it is much harder to grasp the values of the sleep amount. As noted earlier, a remedy for this is to transform the daylight_length_h to correspond to the sleep amount. We can do this by reducing the maximum value by some value, lets use 3. Then the plot daylight visualization should extend to, and not beyond, 8 (24/3).

```{r circle sun+dark transform 1}
reduction <- 3
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h/reduction), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h/reduction, ymax=24/reduction, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))+
  geom_vline(xintercept=75, alpha =.6, linetype="dashed")+
  geom_vline(xintercept=270, alpha =.6, linetype="dashed")
```

With this transformation, the daylight hours overlap nicely with the data. Although it might be misleading that it suggests that each "day" is less than 8 hours. Nevertheless, this can be ameliorated by indicating in the (or a) text that it is a transformation in this manner. Moreover, much of the daylight length overlap with the data points, which we can fix by either increasing or decreasing the size. 

One design feature is to reduce the daylight length by a number that ends up even. By doing so, the jumps of the y-axis (steps of 2 hours), which I have implemented, will overlap nicely with meaningful changes in daylight length. Take for instance that by day 75 and 270 (see the dashed lines) half the day contains sunlight and the other half contains no sunlight. This can rather easily be gathered as the range of the daylight is 8 hours, half of it is 4 hours, which indicate 24 and 12 hours respectively. 

I will first try to increase it by dividing by 2 instead of 3. 

```{r circle sun+dark transform 2}
reduction <- 2
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h/reduction), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h/reduction, ymax=24/reduction, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

Here the daylight length extends beyond the data points, but still overlaps with each data point. We can try to reduce the daylight length to reach, maximally, below the lowest data point.  

```{r circle sun+dark transform 3}
reduction <- 6
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h/reduction), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h/reduction, ymax=24/reduction, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

In this display, the data points are the main focus of the plot, but the daylight length is nicely illustrated. On the other hand, it appears as though the illustration is more of a symbol or icon than displaying something useful. 

To further enhance the difference between the data point, we can further transform the daylight visualization. Due to the way *coord_polar* implement the range of the y-axis, it will reduce the plot to the smallest value on the plot. In the first circle plot implementation, the smallest value was close to 6, and so the plot started at 6 (at the very center). By replacing *geom_area* with *geom_ribbon*, we can limit our daylight visualization to start at some value above 0, since there is no valuable data presented before the 6th hour. With this, we can also retain the contour of the year-round daylight length, in similar ways as we have done previously. 

```{r circle sun+dark transform 4}
reduction <- 4  
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

In this plot, it is easier to discern the difference between each data point, while also retaining the relative change in daylight throughout the year. It is important to point out that the daylight visualization illustrate the relative change in daylight and not hour based changes. It will be important to point out in the text how the daylight is transformed in text to not lead to misunderstandings.

Another change was to increase the number of ticks on the y-axis to be able to better see differences between the data points. 

### Sleep and wake times

Another way of visualizing the sleep amount is to visualize the sleep time and wake time. This, however, might be more difficult as the span ranges from around 5 hours to above 24 hours (indicating going to sleep later than 24, which should be transformed to 0). Nevertheless, it is worth to investigate how the plot change. 

```{r circle sleep&wake time}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=wake_time))+
  geom_point()+
  geom_point(mapping=aes(y=sleep_time))+  # add sleep time 
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

In this plot, it is much harder to see differences between each data point. This is because the range of each band of data points (sleep time around 24 and wake time around 8) is quite small, but the difference between each band is large (around 16 hours). We end up with a plot with a lot of dead space, conveying no information, between the high band and the small band. To fix this, we can transform either the sleep time or wake time. I will first try to reduce the sleep time by 24. 

```{r circle 24-sleep&wake time}
reduction <- 24
sleep_data |>
  ggplot(aes(x=cumulative_days, y=wake_time))+
  geom_point()+
  geom_point(mapping=aes(y=24-sleep_time))+  # add sleep time 
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

Although we are better able to see the differences between the data points, the plot is rather similar to the former. It contains a cluster of data points in the center, which is not that neat and rather uninformative. At any rate, one of the ideas of visualizing sleep and wake times is to have a create a band that indicate the sleep. 

```{r circle 24-sleep&wake time + ribbon}
reduction <- 2
additional_start <- 0
sleep_data |>
  ggplot(aes(x=cumulative_days, y=wake_time))+
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=24-sleep_time, ymax=wake_time), alpha =.4)+
  geom_point()+
  geom_point(mapping=aes(y=24-sleep_time))+  # add sleep time 
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

The plot does indicate the band of sleep from sleep time to wake time. However, it seems rather weird to have the cluster of data points in the center. Moreover, the cluster is rather uninformative as it is difficult to gather the relationship between sleep and wake time. To investigate whether this is a problem with circular plots or visualizing data in this way, I will visualize it using a normal plot (by removing *coord_polar*). 

```{r normal 24-sleep&wake time+ribbon}
reduction <- 2
additional_start <- 0
sleep_data |>
  ggplot(aes(x=cumulative_days, y=wake_time))+
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=24-sleep_time, ymax=wake_time), alpha =.4)+
  geom_point()+
  geom_point(mapping=aes(y=24-sleep_time))+  # add sleep time 
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,2))
```

This way of visualizing seems to be fine to me. With a normal plot, we can see changes in *both* sleep times and wake times. This information is essentially lost in the circular plot, but evidence with this plot. Moreover, the band seems to add meaningful relations between each data point - you can see ups and downs of sleep/wake times. 

To visualize with a circle plot, I believe it is best to only use sleep amount. It does not create a cluster of data points that are uninformative or incredibly difficult to interpret. Moreover, the range of sleep can be displayed with a range from the data point to the center of the plot. I will revert back to the last plot with sleep amount to investigate whether it can be useful to include a ribbon from the data point to the "null" value.  

```{r circle ribbon}
reduction <- 4  
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=4,ymax=sleep_amount), alpha=.4)+
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

Adding a ribbon from each data point to the center value (in this case 4), we get some more contrast between each data point. This contrast can be helpful in interpreting the data. However, since the ribbon only extends to the center value and not all the way to 0, it can appear as though people start to sleep from the 4th hour of the night. If this plot is used, it should be noted that the data starts from 0, but has been cut out because it does not contain any relevant information. Nevertheless, I wonder how the plot changes by reverting the center value to 0 instead of 4.

```{r circle daylight start at not zero}
reduction <- 4  
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=0,ymax=sleep_amount), alpha=.4)+
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

Serendipity. Forgetting to change the minimum value of the daylight length seem to have made it better. In this plot, we can clearly see what period of time contains *no sunlight*. The previous plots failed to inform us what period contained no sunlight. Although I would not say that the ribbon has added anything significant by visualizing all the way to zero, it certainly informed us that some distance from the minimum daylight value and the plots minimum value should be discerned. 

```{r circle daylight start change 1}
reduction <- 4
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=3.5,ymax=sleep_amount), alpha=.4)+
  geom_point()+
  geom_smooth(alpha = .2)+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

In this plot, the days with no sunlight are restricted, making it more difficult to interpret which days contain no sunlight. To fix this, we can further increase the difference between the daylight minimum and the plot minimum (by increasing the range of the ribbon between each data point and the center). 

```{r circle daylight start change 2}
reduction <- 4  
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_ribbon(mapping=aes(xmin=cumulative_days, xmax=cumulative_days,
                          ymin=2,ymax=sleep_amount), alpha=.4)+
  geom_point()+
  geom_smooth()+
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

I would say this plot have a nicer balance between the distance of the center and the daylight length. However, it remains a question whether it is necessary with a ribbon as compared to a simple line. 

### Line connection

```{r circle line connection (not ribbon)}
reduction <- 4  
additional_start <- 4
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_line()+
  geom_smooth()+
  geom_point(mapping=aes(x=1,y=2), alpha =0)+ # off center
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,1))
```

Much of the same contrasts are retained in this plot without creating too many colors. Adding too much non-essential ink can be confusing and add to difficulty in interpreting the data. Thus, keeping non-essential ink to a minimum is a great starting option. Moreover, the link between each data point is, perhaps, better illustrated with simple lines than with the ribbon. The main point of the ribbon was to create a link to the center and not between each data point. 

I will end this part with a final plot of both a circle and a normal plot and discuss some of their feature. 

```{r circle final plot}
reduction <- 4.8 
additional_start <- 5
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, 
                          ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_line()+
  geom_smooth(alpha=0)+
  geom_point(mapping=aes(x=1,y=4), alpha =0)+ # off center
  coord_polar(direction = -1, start = pi)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30),labels = c(0, unique(sleep_data2$date_m_name)))+
  scale_y_continuous(breaks=seq(4,24,1))+
  labs(x="Cumulative day", y="Hours of sleep")
```

```{r normal final plot}
reduction <- 4.8
additional_start <- 5
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_ribbon(mapping=aes(ymin=additional_start, 
                          ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=cumulative_days, xmax=cumulative_days), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.3)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_line()+
  geom_smooth(alpha=0)+
  coord_cartesian(expand=F)+
  theme_bw()+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(5,24,1))+
  labs(x="Cumulative day", y="Hours of sleep")
```

From the two plots, I would say they both have some advantages and disadvantages. I would say that the circle plot better illustrates the change in daylight length, which may be a bit more difficult to interpret from the normal plot. On the other hand, the normal plot seem to visualize each data point in relation to time and each other in a much better way. We can more easily see the trend of the data, by both following the mean and the data points. By contrast, both the data points and the mean line is more cryptic in the circle plot, although not impossible to see. 

## Circular summary statistic

One way to ameliorate this problem is to reduce the amount of data that is plotted. This can be done by summarizing to weeks or months.  

```{r normal sum month}
sleep_data |>
  mutate(date_m_name = factor(date_m_name, 
                              labels = c("Jan","Feb","Mar",
                                         "Apr","May","Jun",
                                         "Jul","Aug","Sep",
                                         "Oct","Nov","Dec"))) |>
  ggplot(aes(x=date_m_name, y=sleep_amount))+
  geom_point(position=position_nudge(x=-.05), alpha=.2)+
  stat_summary(fun.data=mean_cl_normal, geom="pointrange", 
               color="red", position=position_nudge(x=.05))+
  theme_bw()
```

Splitting it by month makes it easier to see all the data points, but it is less meaningful. Each black dot represents one day in each month, but their relationship to the day is removed. This information is useful as it tells us something about the trend of the data. However, with this plot it appears as though there is just random months that deviate from the "norm". Another way of visualizing could be through weeks. This would benefit through summarizing more often, than in each month, and by possibly visualizing the trend of the data. 

```{r normal sum weeks}
sleep_data -> sleep_data2

# Add weeks
sleep_data2$week <- c(rep(1:52, each=7),52)

sleep_data2 |> 
  group_by(week) |> 
  ggplot(aes(x=week, y=sleep_amount))+
  geom_point(alpha=.5)+
  stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="red")+
  stat_summary(fun = mean,geom="line", color="red", size=.5)+
  scale_x_continuous(breaks=seq(0,52,4))+
  theme_bw()
```

Visualizing over weeks is more able to show the trend of the data, but also reducing clutter. Nevertheless, we miss the exact relationship between each data point and their day. There might be dependent relationships between sleep, which can be lost with such a plot. However, summarizing over weeks seem a nice compromise between showing a point for every day and reducing it to some summary. 

One of the problems with the circle plot was the data cluttered together. This made it difficult to understand the exact relationship between each day, and the day. However, by using a summary statistic, a circle plot might be more effective at visualizing trends of the data and reducing clutter. 

```{r circle sum weeks}
sleep_data2 |> 
  group_by(week) |> 
  ggplot(aes(x=week, y=sleep_amount))+
  geom_point(alpha=.5)+
  stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="red")+
  stat_summary(fun = mean,geom="line", color="red", size=.5)+
  scale_x_continuous(breaks=seq(0,52,2))+
  theme_bw()+
  coord_polar(direction = -1, start = pi)
```

Representing summary statistic in a circle plot seems to work better. It is now easier to discern changes in sleep across the seasons. Nevertheless, visualizing each data point seem to still add some clutter to the plot. To investigate further I will do some changes. 


```{r circle sum week aesthetic change}
reduction <- 6
additional_start <- 6
sleep_data2 |> 
  group_by(week) |> 
  ggplot(aes(x=week, y=sleep_amount))+
    geom_ribbon(mapping=aes(ymin=additional_start, 
                          ymax=(daylight_length_h/reduction)+additional_start,
                          xmin=week, xmax=week), fill="yellow", alpha = .3)+
  geom_ribbon(mapping=aes(ymin=(daylight_length_h/reduction)+additional_start,
                          ymax=24/reduction+additional_start, 
                          xmin=week, xmax=week), fill="black", alpha=.3)+
  stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="red")+
  geom_smooth(alpha=0)+
  #stat_summary(fun = mean,geom="line", color="red", size=.5)+
  scale_x_continuous(breaks=seq(0,52,2))+
  theme_bw()+
  coord_polar(direction = -1, start = pi)+
  geom_point(mapping=aes(x=53,y=5), alpha=0)+ # to make space between 1 and 52 week
  labs(x="Week", y="Hours slept")
```

In this plot, I remove each individual data point, remove the line connection, added a smooth function, and added the daylight length. Making these aesthetic changes did improve the ability of the circle plot to convey accurate information. Although some unfortunate choices had to be made. For one, the first week (1) and last week (52) overlap, so I added a single invisible point to discern the summary statistic. Moreover, the visualization of the daylight length changes step wise, instead of smoothly. Nevertheless, with this strategy, the circle plot can be used to convey information in an interesting way. We can more easily see the trend of the line, and we can get a sense of the distribution of the sleep amount within each week. 

Another way we might be able to use circle plots, is to summarize through each month instead. However, we will be left with similar problems as in the normal plot - you do not see the trend of the data because it is so summarized. 

```{r circle month+aesthetic}
sleep_data |>
  mutate(date_m_name = factor(date_m_name, 
                              labels = c("Jan","Feb","Mar",
                                         "Apr","May","Jun",
                                         "Jul","Aug","Sep",
                                         "Oct","Nov","Dec"))) |>
  ggplot(aes(x=date_m_name, y=sleep_amount))+
  geom_point(alpha=.2)+
  stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="red")+
  geom_smooth()+
  theme_bw()+
  coord_polar(direction = -1, start = pi)
```

## Final notes
Visualizing using circular plots may be used in intriguing ways to visualize data. Here I attempt to visualize fake sleep data through a year using circular plots. As well as visualizing various aspects to make the presentation of the data better. Through this investigation, I believe that a normal plot conveys the message most accurately and simply. On the other hand, the circular plot has a charms in its visualization of the change in daylight length. Moreover, circular plots seem to favor data that is summarized or contain less data points, because it can quickly become cluttered, making it hard to understand the difference between each data point. 


