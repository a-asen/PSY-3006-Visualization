---
title: "circle_plot"
format: pdf
lang: en-GB
editor: 
  markdown:
      wrap: 82
---

# Circle plot

The motivation for creating a circle plot is to visualize data in relation to
seasons. Seasons are a recurring natural phenomenon that can significantly impact
various aspects of our lives, from weather patterns to human behaviour.
Visualizing data in a circle may offer a novel way to explore seasonal changes.

This approach may be valuable for data sets related to changes over time,
particularly over seasons. Take for instance, Tromsø, it is located above [above
the arctic circle](https://en.wikipedia.org/wiki/Arctic_Circle) and exhibits some
of the most extreme daylight changes - from no sunlight at winter, to only
sunlight at summer. A remarkable change in season which could neatly be displayed
in a circular plot.

For this purpose, I want explore the utility of visualizing a data in a circular
way. We recently had a study that investigated participants when they were sleep
deprived and when they were not. To this end, we gathered data regarding
participants sleep time and wake time, as well as controlling with an Actigraphy.
Although I will not use that data here, the data is well suited to visualize
changes during a season.

With this idea in mind, I have created fake sleep data of X along with the sleep
rise and set times located at Tromsø. The sleep data follow the pattern of the sun
changes throughout the changes along with some additional noise. The goal is to
visualize the sleep time, wake time, and sun rise changes throughout a year (2023)
in a circular way.

## Standard visualizing

We first load the relevant packages and retrieve the data.

```{r preparation}
#| message: false
library(tidyverse) # libs
load("../data/sleep_data.rdata") # load data
```

To start of, we can visualize the data according to sleep amount throughout the
year.

```{r}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_point()
```

We can see that the data starts off high (in January) and reduce towards middle
(summer) and increase towards the end (winter). To investigate the average
throughout the year, we can add a geom_smooth.

```{r}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_point()+
  geom_smooth()
```

To put our plot in context, we can add the amount of daylight in each day
throughout the year.

```{r}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .5)+
  # Area before data points to keep it in the background
  geom_point()+
  geom_smooth()
```

The yellow area display the number of hours of sunlight that day receives. As we
can see, the sunlight varies from nothing (at the start and end of the x axis) to
all day (the middle of the x axis).

Alternatively, we can display the amount of dark hours throughout the year.

```{r}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.5)+
  geom_point()+
  geom_smooth()

```

Combining both light and darkness throughout the year might aid in discerning the
number of daylight hours.

```{r}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .5)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.5)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()
```

Now, with this plot, we can more easily discern between darkness and sunlight
throughout the year. We will leave some alpha to be able to see the underlying
grid.

To finish up our simple plot, We can add some aesthetic changes to the plot to
make it more pleasing.

```{r}
sleep_data |>
  ggplot(aes(cumulative_days, sleep_amount))+
  geom_area(mapping=aes(y=daylight_length_h), fill="yellow", alpha = .4)+
  geom_ribbon(mapping=aes(ymin=daylight_length_h, ymax=24, 
                          xmin=cumulative_days, xmax=cumulative_days), fill="black", alpha=.4)+
  # Ribbon before data points to keep it in the background
  geom_point()+
  geom_smooth()+
  theme_bw()+
  coord_cartesian(expand=F)+
  scale_x_continuous(breaks=seq(0,365,30))+
  scale_y_continuous(breaks=seq(0,24,4))
```

Here we can quite neatly see the the amount of sleep each day in relation to the
number of daylight hours. Although we should note that a lot of date is being
shown that does not contain a lot of data. For instance, the distance over 11
hours and below 5 hours contain very little data as compared to in between 11 and
5. This could be ameliorated by condensing the sunlight hours within this span.
Either by transformation, or, with a different, right hand, scale, ranging from 0
to 24 hours. The latter of which might be more satisfactory to understand the
radical changes throughout the year. However, I will move on to visualizing in a
cricluar way and then discuss and suggest a final plot.

## Circular plot

It is rather easy to display data in circles using ggplot. We can simply use the
code "coord_polar" which transforms the data to fit a circle. However, some of my
earlier attempts utilized the "circlize" with inspiration from [R-Gallery - chord
diagram](https://www.kyle-w-brown.com/R-Gallery/flow.html#chord-diagram). A
packages that works great but is also more limiting than ggplots. Moreover, Kyle
Brown also talk about [circular
barplots](https://www.kyle-w-brown.com/R-Gallery/ranking.html#circular-barplot)
earlier in the book, which utilizes ggplot.

As discussed earlier, the benefits of using ggplots is that it is made to be
flexible at the various stages of visualizing data. On the other hand, [*circlize*
is based on](https://jokergoo.github.io/circlize_book/book/introduction.html)
[Circos](http://circos.ca/) a Perl implementation of circular data visualization, which is implemented particularly for genomic research. Which seems to be both its strength and, in my case, its flaws. Therefore, utilizing ggplots may be beneficial for my case, as it has more flexibility in changing the plot. 

First I test the "coord_polar" adaptation. 

```{r circle}
sleep_data |>
  ggplot(aes(x=cumulative_days, y=sleep_amount))+
  geom_point()+
  coord_polar()
```

It seems that the transformation also limits the range of the y-axis for us. A problem This way of interpreting information can be confusing, as th








geom_hline(yintercept=24)+ geom_hline(yintercept=0)+
coord_cartesian(xlim=c(0,365))+ scale_x_continuous(breaks = seq(1,365,29))

## adding weeks, and summarise

```{r adding weeks to the plot}
sleep_data |>
  group_by(date_m_nameL) |> 
  summarise(mean_sleep = mean(sleep_amount))
  mutate(month_sum = )
  
```

\* should i have stage wise plot updating? Some text and some plotting? OR use it
more to illustrate visualizing principles (perhaps better than showing "my own
learning curve") Plot

To.do: - Indicate that sleep time is -24 hours.

```{r}
sleep_data |> 
  ggplot(aes(x = count, y = wake_time))+
  geom_area(mapping=aes(x=count, y=daylight_length_h/2.4))+
  geom_point()+
  geom_hline(yintercept=8)+
  geom_vline(xintercept=0)+
  coord_polar(start=pi, direction=-1)+
  geom_point(mapping=aes(x=count, y=24-sleep_time))


```

## Comparison to circilize?????

-   [ ] discuss difference to circilize
