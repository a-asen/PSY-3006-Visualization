---
title: "Mutlivariate visualization: continous and continous"
format: pdf
lang: en-GB
editor: 
  markdown:
      wrap: 62
---

```{r start libs}

```


```{r start plot}

```


{{< pagebreak >}}


In these latter exercises, I will visualize the distribution of data. More specifically visualize the distribution of data in relation to each other. In the first (this) exercise, I will visualize two continuous variables, while in the latter I will visualize the distribution of data over a categorical variable. To do this I will use a dataset related to mind wandering where we have two variables that are used to predict mind wandering. These two variables related to behavioural performance during the task and are behavioural variability (BV), a measure of response variation, and approximate entropy (AE) a measure of randomness.

I start by loading the libraries, functions and data. 

```{r}
library(tidyverse)
library(plotly)
read_csv("../data/raw_mwtms_data.csv") -> all_mw_data 
source("../src/transformation.R") # AE calculation
```

I then select the relevant data, in this case, I will only use the data from the "sham" condition. That is the condition in which no manipulation was done to participants. 

```{r }
all_mw_data |> 
  select(-region.y) |>
  filter(stimulation == "sham") -> mw_data

da_pro(mw_data, nback=25) -> trans_mw
trans_mw
```

We can now start plotting the data. There are a only a couple of ways one can visualize the distribution of data over a variable. This could be with a histogram or a density distribution. A histogram summarize the data according to the number of occurances within a certain span. 

```{r histogram}
trans_mw |>
  ggplot(aes(x=zlogapen))+
  geom_histogram()
```

It is perhaps better to use a histogram over more meaningful distances of the variable. For instance, an intelligence quotation test, where the ranges can be more meaningful. In our case, however, visualizing the density may be more honest to the data. 

```{r density }
trans_mw |>
  ggplot(aes(x=zlogapen))+
  geom_density()
```

With a density plot, we can more easily grasp the distribution over each value. In this case, over smaller values of the variable AE (zlogapen) variable. The same can be done for BV, and moreover, we can combine them to show the distribution of each variable. 

```{r}
trans_mw |>
  pivot_longer(c(zlogapen,zlogbv)) |>
  ggplot(aes(x=value, col=name))+
  geom_density()
```

However in these cases the relationship between the variables may be ambiguous and underexlored. In particular, we may be interested in how these two variables related to each other. We can explore this by visualizing the join distribution with a 2d density plot. This can be done in multiple ways, for instance, we can use hexagons to count the number of occurrences within each joint area.

```{r}
trans_mw |> 
  filter(block=="B0") |>
  ggplot(aes(x=zlogbv, y=zlogapen))+ 
  geom_hex() -> mw_hex
mw_hex
```

In this plot we can see how BV and AE relate to each other. This is informative because the assumption with these two variables is that when participants are focused on the task, they should generate high AE score and have consistent BV. If this is the case then we would expect that BV remains around zero, and that AE is high when participants are focused on the task. On the other hand, when participants are not focused on the task, they should show more BV and lower AE. This can be gauged to some degree on the previous plot. To indicate what I mean, I have highlighted the areas corresponding to each state of mind wandering below.

```{r}
mw_hex +
  
  
```



using colours within the same graph or facets over different plots. In these cases the dimensions has to be the same or very similar. However, another way of visualizing data multivariate plots can be to use integrate two plots 

With this, I can explore some basic features of the different variables. Moreover, there are different ways of visualizing multivariate 

```{r}
trans_mw |> 
  filter(block=="B0") |>
  ggplot(aes(x=zlogbv, y=zlogapen))+ 
  geom_hex()
  geom_density()
  geom_contour()
  
trans_mw |> 
  ggplot(aes(x=logbv, y=apen))+
  geom_density_2d_filled()
  geom_point()
```

```{r}
plot_ly(trans_mw, x=zlogbv, y=zlogapen)
trans_mw |> 
  ggplot(aes(x=proberound, y=zlogbv, z=1:3509))+ 
  geom_point()
```

```{r}
trans_mw |> 
  ggplot(aes(x=proberound, y=zlogapen))+ 
  geom_point()
```




